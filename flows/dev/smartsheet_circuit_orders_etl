id: "smartsheet_circuit_orders_etl"
namespace: "dsn"
revision: "1"

variables:
  smartsheetToken: "{{ env.SMARTSHEET_TOKEN }}"
  dbConnString: "{{ env.PG_CONN_STRING }}"

tasks:
  - id: "fetch_customer_circuit_orders"
    type: "io.kestra.plugin.smartsheet.sheets.Get"
    description: "Fetch Customer Circuit Orders sheet"
    sheetId: "{{ env.CUSTOMER_CIRCUIT_SHEET_ID }}"
    accessToken: "{{ vars.smartsheetToken }}"
    queryParameters:
      include: "objectValue,discussions,attachments,rowPermalink,rowId"
      
  - id: "fetch_fttt_circuit_tracker"
    type: "io.kestra.plugin.smartsheet.sheets.Get"
    description: "Fetch FTTT Circuit Tracker sheet"
    sheetId: "{{ env.FTTT_CIRCUIT_SHEET_ID }}"
    accessToken: "{{ vars.smartsheetToken }}"
    queryParameters:
      include: "objectValue,discussions,attachments,rowPermalink,rowId"

  - id: "transform_and_combine_data"
    type: "io.kestra.core.tasks.scripts.Python"
    description: "Transform and combine circuit data"
    inputFiles:
      customer_circuits: "{{ outputs.fetch_customer_circuit_orders }}"
      fttt_circuits: "{{ outputs.fetch_fttt_circuit_tracker }}"
    script: |
      import pandas as pd
      from datetime import datetime
      
      # Load sheets
      customer_df = pd.read_json("customer_circuits")
      fttt_df = pd.read_json("fttt_circuits")
      
      # Add circuit type
      customer_df['Circuit Type'] = 'Customer'
      fttt_df['Circuit Type'] = 'FTTT'
      
      # Combine datasets
      combined_df = pd.concat([customer_df, fttt_df], ignore_index=True)
      
      # Create Full Address
      combined_df['Full Address'] = combined_df['Address'] + ',' + combined_df['City'] + ',AR'
      
      # Add report date
      combined_df['Report Date'] = datetime.now().strftime('%Y-%m-%d')
      
      # Convert dates
      date_cols = ['Start', 'Finish/FOC', 'Date Completion Notice Sent', 'RR Date NTP']
      for col in date_cols:
          if col in combined_df.columns:
              combined_df[col] = pd.to_datetime(combined_df[col], errors='coerce')
      
      # Save as JSON
      combined_df.to_json("combined_circuits.json", orient='records', date_format='iso')

  - id: "load_to_postgres"
    type: "io.kestra.plugin.jdbc.postgresql.Query"
    description: "Load transformed data to PostgreSQL"
    url: "{{ vars.dbConnString }}"
    username: "{{ env.PG_USERNAME }}"
    password: "{{ env.PG_PASSWORD }}"
    queries:
      - >
        INSERT INTO staging.circuit_orders_raw (
          site_name, circuit_type, order_type, customer_type, status,
          customer, member, service_speed, fiber_ready, dsn_testing_complete,
          drop_ready_complete, start_date, finish_foc, completion_notice_date,
          testing_completed, late_reason, county, school_district,
          full_address, report_date, batch_id, checksum
        )
        SELECT 
          "Site Name/Task", circuit_type, order_type, customer_type, status,
          customer, member, service_speed, fiber_ready, dsn_testing_complete,
          drop_ready_complete, start, "Finish/FOC", "Date Completion Notice Sent",
          "Testing Completed Prior/After FOC", late_reason, county, school_district,
          full_address, report_date::date, 
          gen_random_uuid(), 
          md5(row_to_json(t)::text)
        FROM json_populate_recordset(null::record, {{ outputs.transform_and_combine_data }}) t;
