services:
  db:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ${DB_CONTAINER_NAME}
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - ai_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:8.13
    container_name: ${PGADMIN_CONTAINER_NAME}
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
      - PGADMIN_LISTEN_PORT=5050
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
      - GUNICORN_TIMEOUT=300
      - GUNICORN_THREADS=25
      - PYTHONPATH=/pgadmin4
      - SHARED_STORAGE=/var/lib/pgadmin/storage
    ports:
      - "${PGADMIN_PORT}:5050"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./config/pgadmin/servers.json:/pgadmin4/servers.json
    networks:
      - ai_network
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-O", "-", "http://localhost:5050/misc/ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  kestra:
    image: kestra/kestra:latest
    container_name: ${KESTRA_CONTAINER_NAME}
    user: "root"  # Required for Docker socket access
    command: server standalone --config /etc/config/application.yaml
    volumes:
      - kestra_data:/app/storage
      - kestra_flows:/app/flows
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/kestra-wd:/tmp/kestra-wd
      - ./config/kestra/application.yaml:/etc/config/application.yaml
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - KESTRA_USERNAME=${KESTRA_USERNAME}
      - KESTRA_PASSWORD=${KESTRA_PASSWORD}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OLLAMA_HOST=${OLLAMA_HOST}
      - OLLAMA_MODEL=${OLLAMA_MODEL}
      - KESTRA_GIT_URL=${KESTRA_GIT_URL}
      - KESTRA_GIT_USERNAME=${KESTRA_GIT_USERNAME}
      - KESTRA_GIT_TOKEN=${KESTRA_GIT_TOKEN}
      - GITHUB_USERNAME=${GITHUB_USERNAME}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - WEBHOOK_KEY=${WEBHOOK_KEY}
    ports:
      - "${KESTRA_PORT}:8080"
      - "${KESTRA_WEBSERVER_PORT}:8081"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - ai_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  vectorizer-worker:
    image: timescale/pgai-vectorizer-worker:0.1.0rc4
    container_name: ${VECTORIZER_CONTAINER_NAME}
    environment:
      PGAI_VECTORIZER_WORKER_DB_URL: ${PGAI_VECTORIZER_WORKER_DB_URL}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OLLAMA_MODEL: ${OLLAMA_MODEL}
      OLLAMA_HOST: ${OLLAMA_HOST}
      PGAI_VECTORIZER_OLLAMA_MAX_CHUNKS_PER_BATCH: 1000
    depends_on:
      db:
        condition: service_healthy
      ollama:
        condition: service_started
    networks:
      - ai_network
    restart: "no"

  ollama:
    image: ollama/ollama:0.4.2-rc1
    container_name: ${OLLAMA_CONTAINER_NAME}
    volumes:
      - ollama_data:/root/.ollama
    ports:
      - "11434:11434"
    networks:
      - ai_network
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_API_KEY=${OLLAMA_API_KEY}
      - CUDA_VISIBLE_DEVICES=''  # Disable GPU
    restart: unless-stopped

networks:
  ai_network:
    name: ai_network
    driver: bridge

volumes:
  postgres_data:
  pgadmin_data:
  ollama_data:
  kestra_data:
  kestra_flows: